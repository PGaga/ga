插入排序的思路：
  有一个待排序数组a[n]，将一个数组看作是两个表的组合一个是有序表，一个是无序表。数组的第一个数a[0]看作有序表的第一个数
  无序表是a[1]--[n-1],从后面的一次退出一个数，插入到有序表的合适位置。
  public static void InsertSort(int [] arr){
    int temp;// 临时变量，这是为了之后交换的时候用的
    int i,j;
    for(i=1;i<arr.length-1;i++){// 注意i=1 下标是1开始的 因为等于0 的那个元素放在了第一个 里面 当做有序表
        if(arr[i]<arr[i-1]){// 当元素发生逆序时，才会进行交换，否者不会交换 (前面一个元素比后面一个元素大留在原地)
           temp = arr[i];
           for(j=i-1;j>=0&&temp<arr[j];j--){
            arr[j+1]=arr[j];
           }
           arr[j+1]=temp;
        }
    }
  }
折半插入排序：假设数组中有序的数组是a[0]~a[i-1]，此时需要将a[i]元素插入进去，此时需要利用折半查找在有序表中查到合适的位置
和插入排序做比较 就是在插入的时候 方式不一样，插入排序是挨个做比较，折半不是挨个做比较

  public static void BinaryInsertSort(int [] arr){
    int temp ,i ,j ,low,high,mid;
    for(i=1;i<arr.length;i++){
      if(arr[i]<arr[i-1]){
        temp = a[i];
        low =0;high=i-1;
        while(low<high){
          if(temp<arr[mid]){
            high=mid-1;
          }else{
            low = mid+1;
          }
          for(j=i-1;j>=low;j--){
            arr[j+1]=arr[j];
          }
          a[low]=temp
        }
      }
    }
  }
  
  
