350. Intersection of Two Arrays II
Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].

Note:
Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
Follow up:
What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?

Class Solution{
  public int[] intersect(int[] nums1, int[] nums2) {
  // 判断是否为空 为空返回0
    if(nums1==null||nums2==null){
    return new int[0];
    }
    List<Integer> result =new List<>();
    Map<Integer,Integer> map = new HashMap<>();
    //将nums1的数字放入 map中 --->(key,value)对
    for(int num:nums1){
     if(!map.containsKey(num)){
        map.put(num,0);
     }
     map.put(num,map.get(num)+1);
    }
    
   // 在map中检查第二个数组 是否存在
   for(int num,nums2){
         if(map.containsKey(num)&&map.get(num)>0){
            result.add(num);
            map.put(num,map.get(num)-1);
          }
   }
   int [] res = new int[result.size()];
   for(int i =0;i<result.size();i++){
    res[i] = result.get(i);
   }
   return res;
   }
}
