Let's call an array A a mountain if the following properties hold:

A.length >= 3
There exists some 0 < i < A.length - 1 such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]
Given an array that is definitely a mountain, return any i such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1].
以上是题目的意思：就是在到一个组数中 的峰值 满足的公式 如上：
思路：利用二分搜索即可
二分搜索 是查找中的最常用的方法 一个数组 选第一个值比较 数组分为 [小于第一个值的]+[第一个值]+[大于第一个值的] 左右两个数组不是有序的 需要递归或者循环
 public int peakIndexInMountainArray(int[] A) {
        int left=0;
        int right=A.length-1;
        int  mid = (left+right)/2;
        while(left<right){

            if (A[mid-1]<A[mid]&&A[mid]<A[mid+1]){
                left = mid;
            }else if (A[mid-1]>A[mid] && A[mid]>A[mid+1]){
                right = mid;
            }else {
                break;
            }
            mid = (left+right)/2;
        }
        return mid;
    }
